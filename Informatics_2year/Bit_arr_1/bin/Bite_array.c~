#include <stdlib.h>
#include <stdio.h>



int check (bitmap* bitarr, int n) {
    if (bitarr->num < n) {
        printf("Out of array: change place or expand the array");
        return 1;
    }
    else if (n < 0)
        printf("Negative value of place");
    else return 0;
}

int findplace (int* plc, int n) {
    if (plc == NULL) return -1;
    plc[0] = n / 8;
    plc[1] = n % 8;

    return 0;
}

int inizialize(bitmap* bitarr, int n) {
    n % 8 ? n/8+1 : n/8;
    bitarr.arr = (int*)calloc(n, sizeof(int)); // . or -> dnt rem
    bitarr.count = 0;
    bitarr.num = n;

    return 0;
}

int set(bitmap* bitarr, int n, int bit) {
    if (check(n))
        return 1;
    int plc[2];
    findplace(plc, n);
    if (bit > 0)
        bit = 1;
    else if (!bit)
        bit = 0;
    else return 1;
    if (bit)
        bitarr.arr[plc[0]] = bitarr.arr[plc[0]] | (01 << (7 - plc[1]));
    else
        bitarr.arr[plc[0]] = bitarr.arr[plc[0]] & !(01 << (7 - plc[1]));

        return 0;
}

int get(bitmap* bitarr, int n, int* value) {
    if (check(n))
        return 1;
    int plc[2];
    findplace(plc, n);
    if (bitarr.arr[plc[0]] & (01 << (7 - plc[1])))
        *value = 1;
    else
        *value = 0;

        return 0;
}
